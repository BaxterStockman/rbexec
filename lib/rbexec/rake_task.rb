# frozen_string_literal: true

require 'pathname'
require 'rake/tasklib'
require 'rbexec/class_methods'

class RbExec
  # Rake tasks for generating, regenerating, and cleaning up +lib/rbexec.rb+
  class RakeTask < Rake::TaskLib
    attr_accessor :name

    def initialize(name = :rbexec)
      @name = name
      yield self if block_given?
      define_tasks!
    end

    def generate_task
      @generate_task ||= task(:generate => [lib_path.to_s])
    end

    def clean_task
      @clean_task ||= task(:clean) { FileUtils.rm_f lib_path.to_s }
    end

    def rbexec_library_task
      @rbexec_library_task ||= file(lib_path.to_s => [RbExec.bin_path.to_s]) { write_source! }
    end

    def rbexec_executable_task
      @rbexec_executable_task ||= file install_path.to_s => [RbExec.bin_path.to_s] do
        mkdir_p(install_path.parent.to_s)
        install(RbExec.bin_path.to_s, install_path.to_s)
      end
    end

    def install_task
      @install_task ||= task(:install => [install_path.to_s])
    end

    def install_path_for(*paths)
      Pathname.new(File.join(destdir, prefix, *paths))
    end

  private

    def lib_path
      @lib_path ||= RbExec.source_root + 'lib/rbexec.rb'
    end

    def install_path
      @install_path ||= install_path_for('bin/rbexec')
    end

    def destdir
      @destdir ||= Pathname.new(ENV.fetch('DESTDIR', '').dup.tap { |d| d << '/' if d.empty? })
    end

    def prefix
      @prefix ||= Pathname.new(ENV.fetch('PREFIX', '').dup.tap { |p| p << '/usr/local' if p.empty? })
    end

    def read_source
      return enum_for(__method__) unless block_given?

      RbExec.bin_path.read.each_line.with_index(1) do |line, n|
        yield line, n if line.start_with?('class RbExec') .. line.start_with?('end')
      end
    end

    def write_source!
      lib_path.tap do |p|
        p.parent.mkpath
        p.open('w') do |f|
          f.write <<-AUTOGENERATION_WARNING
# frozen_string_literal: true

#
# WARNING: This is an autogenerated file.  Do not edit by hand; instead edit
# the source snippet in bin/rbexec.
#

require 'rbexec/class_methods'

          AUTOGENERATION_WARNING

          read_source do |line, _|
            f.write(line.sub(/^(\s*#\s*):skip:/, '\1:nocov:'))
          end
        end
      end
    end

    def define_tasks!
      namespace name do
        rbexec_library_task

        desc "Generate #{lib_path}"
        generate_task

        desc "Remove #{lib_path}"
        clean_task

        rbexec_executable_task

        desc "Install #{RbExec.bin_path} to #{install_path} (DESTDIR=#{destdir || 'nil'}, PREFIX=#{prefix || 'nil'})"
        install_task
      end
    end
  end
end
